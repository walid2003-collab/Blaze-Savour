{% doc %}
  @prompt
    A collection grid with product cards for each product's colour variant, displaying the different colours of each product as an individual card., Add the option to make the product card Auto which is just the automatic proportion of the variant image itself. Only display the colour variants do not iterate through size variants. Make the add to cart button an icon on the product image itself like in this theme's original product grid., I don't want to select the collection, the collection should automatically be detected since we're on a collection page. I need you to change the product card to be exactly the same as this theme's original product card.
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-collection-variant-grid-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding_top }}px 0 {{ block.settings.section_padding_bottom }}px;
  }

  .ai-collection-variant-grid__container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-collection-variant-grid__header-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: 40px;
  }

  .ai-collection-variant-grid__title-{{ ai_gen_id }} {
    font-family: {{ settings.type_heading_font.family }}, {{ settings.type_heading_font.fallback_families }};
    font-weight: {{ settings.type_heading_font.weight }};
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin: 0 0 16px;
    {% if settings.type_case_h2 == 'uppercase' %}text-transform: uppercase;{% endif %}
  }

  .ai-collection-variant-grid__description-{{ ai_gen_id }} {
    font-family: {{ settings.type_body_font.family }}, {{ settings.type_body_font.fallback_families }};
    font-weight: {{ settings.type_body_font.weight }};
    font-size: {{ block.settings.description_size }}px;
    color: {{ block.settings.text_color }};
    margin: 0;
  }

  .ai-collection-variant-grid__grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.columns_desktop }}, 1fr);
    gap: {{ block.settings.grid_gap }}px;
    margin-top: 40px;
  }

  @media screen and (max-width: 990px) {
    .ai-collection-variant-grid__grid-{{ ai_gen_id }} {
      grid-template-columns: repeat({{ block.settings.columns_tablet }}, 1fr);
    }
  }

  @media screen and (max-width: 749px) {
    .ai-collection-variant-grid__grid-{{ ai_gen_id }} {
      grid-template-columns: repeat({{ block.settings.columns_mobile }}, 1fr);
    }
  }

  .ai-collection-variant-grid__card-{{ ai_gen_id }} {
    position: relative;
    background: transparent;
    border-radius: 0;
    overflow: hidden;
    transition: transform 0.3s ease;
    border: none;
  }

  {% if settings.card_hover_effect == 'lift' %}
    .ai-collection-variant-grid__card-{{ ai_gen_id }}:hover {
      transform: translateY(-4px);
    }
  {% elsif settings.card_hover_effect == 'scale' %}
    .ai-collection-variant-grid__card-{{ ai_gen_id }}:hover {
      transform: scale(1.02);
    }
  {% elsif settings.card_hover_effect == 'subtle-zoom' %}
    .ai-collection-variant-grid__card-{{ ai_gen_id }}:hover .ai-collection-variant-grid__image-{{ ai_gen_id }} {
      transform: scale(1.05);
    }
  {% endif %}

  .ai-collection-variant-grid__link-{{ ai_gen_id }} {
    display: block;
    text-decoration: none;
    color: inherit;
  }

  .ai-collection-variant-grid__image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    {% unless block.settings.image_aspect_ratio == 'auto' %}
      aspect-ratio: {{ block.settings.image_aspect_ratio }};
    {% endunless %}
    overflow: hidden;
    border-radius: {{ settings.product_corner_radius }}px;
  }

  .ai-collection-variant-grid__image-{{ ai_gen_id }} {
    width: 100%;
    {% if block.settings.image_aspect_ratio == 'auto' %}
      height: auto;
    {% else %}
      height: 100%;
    {% endif %}
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .ai-collection-variant-grid__image-placeholder-{{ ai_gen_id }} {
    width: 100%;
    {% if block.settings.image_aspect_ratio == 'auto' %}
      height: 300px;
    {% else %}
      height: 100%;
    {% endif %}
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: {{ settings.product_corner_radius }}px;
  }

  .ai-collection-variant-grid__image-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.3;
  }

  .ai-collection-variant-grid__badge-{{ ai_gen_id }} {
    position: absolute;
    {% if settings.badge_position == 'top-left' %}
      top: 12px;
      left: 12px;
    {% elsif settings.badge_position == 'top-right' %}
      top: 12px;
      right: 12px;
    {% elsif settings.badge_position == 'bottom-left' %}
      bottom: 12px;
      left: 12px;
    {% endif %}
    padding: 6px 12px;
    border-radius: {{ settings.badge_corner_radius }}px;
    font-size: 12px;
    font-weight: 600;
    z-index: 2;
    font-family: {{ settings.type_body_font.family }}, {{ settings.type_body_font.fallback_families }};
    {% if settings.badge_text_transform == 'uppercase' %}text-transform: uppercase;{% endif %}
  }

  .ai-collection-variant-grid__badge--sale-{{ ai_gen_id }} {
    background: rgb(var(--color-scheme-4-background));
    color: rgb(var(--color-scheme-4-foreground));
  }

  .ai-collection-variant-grid__badge--sold-out-{{ ai_gen_id }} {
    background: rgb(var(--color-scheme-5-background));
    color: rgb(var(--color-scheme-5-foreground));
  }

  .ai-collection-variant-grid__quick-add-{{ ai_gen_id }} {
    position: absolute;
    bottom: 12px;
    right: 12px;
    width: 44px;
    height: 44px;
    background: rgb(var(--color-scheme-1-primary-button-background));
    color: rgb(var(--color-scheme-1-primary-button-text));
    border: none;
    border-radius: {{ settings.button_border_radius_primary }}px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0;
    transform: translateY(10px);
    z-index: 3;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  {% if settings.quick_add %}
    .ai-collection-variant-grid__card-{{ ai_gen_id }}:hover .ai-collection-variant-grid__quick-add-{{ ai_gen_id }} {
      opacity: 1;
      transform: translateY(0);
    }
  {% endif %}

  .ai-collection-variant-grid__quick-add-{{ ai_gen_id }}:hover {
    background: rgb(var(--color-scheme-1-primary-button-hover-background));
    color: rgb(var(--color-scheme-1-primary-button-hover-text));
    transform: scale(1.1);
  }

  .ai-collection-variant-grid__quick-add-{{ ai_gen_id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .ai-collection-variant-grid__quick-add-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
    {% if settings.icon_stroke == 'thin' %}
      stroke-width: 1;
    {% elsif settings.icon_stroke == 'heavy' %}
      stroke-width: 2.5;
    {% else %}
      stroke-width: 2;
    {% endif %}
  }

  .ai-collection-variant-grid__content-{{ ai_gen_id }} {
    padding: 16px 0 0;
  }

  .ai-collection-variant-grid__product-title-{{ ai_gen_id }} {
    font-family: {{ settings.type_heading_font.family }}, {{ settings.type_heading_font.fallback_families }};
    font-weight: {{ settings.type_heading_font.weight }};
    font-size: {{ block.settings.product_title_size }}px;
    color: {{ block.settings.text_color }};
    margin: 0 0 4px;
    line-height: 1.3;
    {% if settings.product_title_case == 'uppercase' %}text-transform: uppercase;{% endif %}
  }

  .ai-collection-variant-grid__variant-title-{{ ai_gen_id }} {
    font-family: {{ settings.type_body_font.family }}, {{ settings.type_body_font.fallback_families }};
    font-weight: {{ settings.type_body_font.weight }};
    font-size: {{ block.settings.variant_title_size }}px;
    color: {{ block.settings.variant_text_color }};
    margin: 0 0 8px;
    line-height: 1.4;
  }

  .ai-collection-variant-grid__price-{{ ai_gen_id }} {
    {% if settings.cart_price_font == 'body' %}
      font-family: {{ settings.type_body_font.family }}, {{ settings.type_body_font.fallback_families }};
    {% elsif settings.cart_price_font == 'subheading' %}
      font-family: {{ settings.type_subheading_font.family }}, {{ settings.type_subheading_font.fallback_families }};
    {% elsif settings.cart_price_font == 'heading' %}
      font-family: {{ settings.type_heading_font.family }}, {{ settings.type_heading_font.fallback_families }};
    {% else %}
      font-family: {{ settings.type_accent_font.family }}, {{ settings.type_accent_font.fallback_families }};
    {% endif %}
    font-weight: 600;
    font-size: {{ block.settings.price_size }}px;
    color: {{ block.settings.price_color }};
    margin: 0;
  }

  .ai-collection-variant-grid__price-compare-{{ ai_gen_id }} {
    text-decoration: line-through;
    color: {{ block.settings.compare_price_color }};
    margin-right: 8px;
    opacity: 0.7;
  }

  .ai-collection-variant-grid__color-swatch-{{ ai_gen_id }} {
    width: {{ settings.variant_swatch_width }}px;
    height: {{ settings.variant_swatch_height }}px;
    border-radius: {{ settings.variant_swatch_radius }}px;
    {% if settings.variant_swatch_border_style != 'none' %}
      border: {{ settings.variant_swatch_border_width }}px solid rgba(0, 0, 0, {{ settings.variant_swatch_border_opacity | divided_by: 100.0 }});
    {% else %}
      border: none;
    {% endif %}
    margin: 0 0 8px;
    display: inline-block;
  }

  .ai-collection-variant-grid__empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: {{ block.settings.text_color }};
  }

  .ai-collection-variant-grid__empty-title-{{ ai_gen_id }} {
    font-size: 24px;
    margin-bottom: 16px;
    color: {{ block.settings.heading_color }};
  }

  .ai-collection-variant-grid__empty-text-{{ ai_gen_id }} {
    font-size: 16px;
    opacity: 0.7;
  }
{% endstyle %}

<collection-variant-grid-{{ ai_gen_id }}
  class="ai-collection-variant-grid-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-collection-variant-grid__container-{{ ai_gen_id }}">
    {% if block.settings.heading != blank or block.settings.description != blank %}
      <div class="ai-collection-variant-grid__header-{{ ai_gen_id }}">
        {% if block.settings.heading != blank %}
          <h2 class="ai-collection-variant-grid__title-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
        {% endif %}
        {% if block.settings.description != blank %}
          <div class="ai-collection-variant-grid__description-{{ ai_gen_id }}">{{ block.settings.description }}</div>
        {% endif %}
      </div>
    {% endif %}

    {% if collection %}
      {% assign has_color_variants = false %}
      
      {% for product in collection.products limit: block.settings.products_limit %}
        {% assign color_option = '' %}
        {% for option in product.options_with_values %}
          {% assign option_name_lower = option.name | downcase %}
          {% if option_name_lower contains 'color' or option_name_lower contains 'colour' %}
            {% assign color_option = option.name %}
            {% assign has_color_variants = true %}
            {% break %}
          {% endif %}
        {% endfor %}
        {% if has_color_variants %}
          {% break %}
        {% endif %}
      {% endfor %}

      {% if has_color_variants %}
        <div class="ai-collection-variant-grid__grid-{{ ai_gen_id }}">
          {% for product in collection.products limit: block.settings.products_limit %}
            {% assign color_option = '' %}
            {% assign color_option_index = 0 %}
            {% for option in product.options_with_values %}
              {% assign option_name_lower = option.name | downcase %}
              {% if option_name_lower contains 'color' or option_name_lower contains 'colour' %}
                {% assign color_option = option.name %}
                {% assign color_option_index = forloop.index0 %}
                {% break %}
              {% endif %}
            {% endfor %}
            
            {% if color_option != blank %}
              {% assign displayed_colors = '' | split: ',' %}
              {% for variant in product.variants %}
                {% assign variant_color = '' %}
                {% if color_option_index == 0 %}
                  {% assign variant_color = variant.option1 %}
                {% elsif color_option_index == 1 %}
                  {% assign variant_color = variant.option2 %}
                {% elsif color_option_index == 2 %}
                  {% assign variant_color = variant.option3 %}
                {% endif %}
                
                {% if variant_color != blank %}
                  {% unless displayed_colors contains variant_color %}
                    {% assign displayed_colors = displayed_colors | append: variant_color | append: ',' %}
                    
                    <div class="ai-collection-variant-grid__card-{{ ai_gen_id }}">
                      <a href="{{ variant.url }}" class="ai-collection-variant-grid__link-{{ ai_gen_id }}">
                        <div class="ai-collection-variant-grid__image-wrapper-{{ ai_gen_id }}">
                          {% if variant.featured_image %}
                            <img
                              src="{{ variant.featured_image | image_url: width: 600 }}"
                              alt="{{ variant.featured_image.alt | escape }}"
                              class="ai-collection-variant-grid__image-{{ ai_gen_id }}"
                              loading="lazy"
                              width="600"
                              {% unless block.settings.image_aspect_ratio == 'auto' %}
                                height="{{ 600 | divided_by: block.settings.image_aspect_ratio }}"
                              {% endunless %}
                            >
                          {% elsif product.featured_image %}
                            <img
                              src="{{ product.featured_image | image_url: width: 600 }}"
                              alt="{{ product.featured_image.alt | escape }}"
                              class="ai-collection-variant-grid__image-{{ ai_gen_id }}"
                              loading="lazy"
                              width="600"
                              {% unless block.settings.image_aspect_ratio == 'auto' %}
                                height="{{ 600 | divided_by: block.settings.image_aspect_ratio }}"
                              {% endunless %}
                            >
                          {% else %}
                            <div class="ai-collection-variant-grid__image-placeholder-{{ ai_gen_id }}">
                              {{ 'product-1' | placeholder_svg_tag }}
                            </div>
                          {% endif %}

                          {% unless variant.available %}
                            <div class="ai-collection-variant-grid__badge-{{ ai_gen_id }} ai-collection-variant-grid__badge--sold-out-{{ ai_gen_id }}">
                              Sold out
                            </div>
                          {% else %}
                            {% if variant.compare_at_price > variant.price %}
                              <div class="ai-collection-variant-grid__badge-{{ ai_gen_id }} ai-collection-variant-grid__badge--sale-{{ ai_gen_id }}">
                                Sale
                              </div>
                            {% endif %}
                          {% endunless %}

                          {% if settings.quick_add %}
                            <button 
                              class="ai-collection-variant-grid__quick-add-{{ ai_gen_id }}"
                              data-variant-id="{{ variant.id }}"
                              aria-label="Add {{ product.title }} - {{ variant_color }} to cart"
                              {% unless variant.available %}disabled{% endunless %}
                            >
                              {% if variant.available %}
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
                                  <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
                                  <line x1="3" y1="6" x2="21" y2="6"></line>
                                  <path d="m16 10-4 4-4-4"></path>
                                </svg>
                              {% else %}
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
                                  <line x1="18" y1="6" x2="6" y2="18"></line>
                                  <line x1="6" y1="6" x2="18" y2="18"></line>
                                </svg>
                              {% endif %}
                            </button>
                          {% endif %}
                        </div>

                        <div class="ai-collection-variant-grid__content-{{ ai_gen_id }}">
                          <h3 class="ai-collection-variant-grid__product-title-{{ ai_gen_id }}">{{ product.title }}</h3>
                          <p class="ai-collection-variant-grid__variant-title-{{ ai_gen_id }}">{{ variant_color }}</p>
                          
                          {% if block.settings.show_color_swatch %}
                            {% assign color_lower = variant_color | downcase %}
                            {% assign swatch_color = '#cccccc' %}
                            
                            {% if color_lower contains 'red' %}
                              {% assign swatch_color = '#dc2626' %}
                            {% elsif color_lower contains 'blue' %}
                              {% assign swatch_color = '#2563eb' %}
                            {% elsif color_lower contains 'green' %}
                              {% assign swatch_color = '#16a34a' %}
                            {% elsif color_lower contains 'yellow' %}
                              {% assign swatch_color = '#ca8a04' %}
                            {% elsif color_lower contains 'purple' %}
                              {% assign swatch_color = '#9333ea' %}
                            {% elsif color_lower contains 'pink' %}
                              {% assign swatch_color = '#ec4899' %}
                            {% elsif color_lower contains 'orange' %}
                              {% assign swatch_color = '#ea580c' %}
                            {% elsif color_lower contains 'black' %}
                              {% assign swatch_color = '#000000' %}
                            {% elsif color_lower contains 'white' %}
                              {% assign swatch_color = '#ffffff' %}
                            {% elsif color_lower contains 'gray' or color_lower contains 'grey' %}
                              {% assign swatch_color = '#6b7280' %}
                            {% elsif color_lower contains 'brown' %}
                              {% assign swatch_color = '#92400e' %}
                            {% elsif color_lower contains 'navy' %}
                              {% assign swatch_color = '#1e3a8a' %}
                            {% endif %}
                            
                            <div 
                              class="ai-collection-variant-grid__color-swatch-{{ ai_gen_id }}"
                              style="background-color: {{ swatch_color }};"
                            ></div>
                          {% endif %}

                          <div class="ai-collection-variant-grid__price-{{ ai_gen_id }}">
                            {% if variant.compare_at_price > variant.price %}
                              <span class="ai-collection-variant-grid__price-compare-{{ ai_gen_id }}">
                                {% if settings.currency_code_enabled_product_cards %}
                                  {{ variant.compare_at_price | money_with_currency }}
                                {% else %}
                                  {{ variant.compare_at_price | money }}
                                {% endif %}
                              </span>
                            {% endif %}
                            {% if settings.currency_code_enabled_product_cards %}
                              {{ variant.price | money_with_currency }}
                            {% else %}
                              {{ variant.price | money }}
                            {% endif %}
                          </div>
                        </div>
                      </a>
                    </div>
                  {% endunless %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endfor %}
        </div>
      {% else %}
        <div class="ai-collection-variant-grid__empty-state-{{ ai_gen_id }}">
          <h3 class="ai-collection-variant-grid__empty-title-{{ ai_gen_id }}">No color variants found</h3>
          <p class="ai-collection-variant-grid__empty-text-{{ ai_gen_id }}">
            This collection doesn't contain products with color variants.
          </p>
        </div>
      {% endif %}
    {% else %}
      <div class="ai-collection-variant-grid__empty-state-{{ ai_gen_id }}">
        <h3 class="ai-collection-variant-grid__empty-title-{{ ai_gen_id }}">Collection not found</h3>
        <p class="ai-collection-variant-grid__empty-text-{{ ai_gen_id }}">
          This block can only be used on collection pages.
        </p>
      </div>
    {% endif %}
  </div>
</collection-variant-grid-{{ ai_gen_id }}>

<script>
  (function() {
    class CollectionVariantGrid{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.setupQuickAdd();
      }

      setupQuickAdd() {
        const buttons = this.querySelectorAll('.ai-collection-variant-grid__quick-add-{{ ai_gen_id }}');
        
        buttons.forEach(button => {
          button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const variantId = button.dataset.variantId;
            if (!variantId || button.disabled) return;
            
            this.addToCart(variantId, button);
          });
        });
      }

      async addToCart(variantId, button) {
        const originalHTML = button.innerHTML;
        button.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="m9 12 2 2 4-4"></path></svg>';
        button.disabled = true;

        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              id: variantId,
              quantity: 1
            })
          });

          if (response.ok) {
            button.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>';
            
            document.dispatchEvent(new CustomEvent('cart:updated'));
            
            if (window.theme && window.theme.cart && window.theme.cart.refresh) {
              window.theme.cart.refresh();
            }
            
            setTimeout(() => {
              button.innerHTML = originalHTML;
              button.disabled = false;
            }, 2000);
          } else {
            throw new Error('Failed to add to cart');
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
          button.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line></svg>';
          
          setTimeout(() => {
            button.innerHTML = originalHTML;
            button.disabled = false;
          }, 2000);
        }
      }
    }

    customElements.define('collection-variant-grid-{{ ai_gen_id }}', CollectionVariantGrid{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Collection variant grid",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Collection"
    },
    {
      "type": "range",
      "id": "products_limit",
      "min": 4,
      "max": 50,
      "step": 2,
      "label": "Products to show",
      "default": 12
    },
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Shop by color"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Description",
      "default": "Discover our products in every color variation"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 2,
      "max": 6,
      "step": 1,
      "label": "Columns on desktop",
      "default": 4
    },
    {
      "type": "range",
      "id": "columns_tablet",
      "min": 2,
      "max": 4,
      "step": 1,
      "label": "Columns on tablet",
      "default": 3
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "label": "Columns on mobile",
      "options": [
        { "value": "1", "label": "1" },
        { "value": "2", "label": "2" }
      ],
      "default": "2"
    },
    {
      "type": "range",
      "id": "grid_gap",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Grid gap",
      "default": 20
    },
    {
      "type": "select",
      "id": "image_aspect_ratio",
      "label": "Image aspect ratio",
      "options": [
        { "value": "auto", "label": "Auto" },
        { "value": "0.75", "label": "Portrait (4:3)" },
        { "value": "1", "label": "Square (1:1)" },
        { "value": "1.33", "label": "Landscape (4:3)" },
        { "value": "1.78", "label": "Widescreen (16:9)" }
      ],
      "default": "auto"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "variant_text_color",
      "label": "Variant text color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "compare_price_color",
      "label": "Compare price color",
      "default": "#999999"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 32
    },
    {
      "type": "range",
      "id": "description_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Description size",
      "default": 16
    },
    {
      "type": "range",
      "id": "product_title_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Product title size",
      "default": 16
    },
    {
      "type": "range",
      "id": "variant_title_size",
      "min": 10,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Variant title size",
      "default": 14
    },
    {
      "type": "range",
      "id": "price_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Price size",
      "default": 16
    },
    {
      "type": "header",
      "content": "Color swatches"
    },
    {
      "type": "checkbox",
      "id": "show_color_swatch",
      "label": "Show color swatches",
      "default": true
    },
    {
      "type": "header",
      "content": "Spacing"
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Top padding",
      "default": 40
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Bottom padding",
      "default": 40
    }
  ],
  "presets": [
    {
      "name": "Collection variant grid"
    }
  ]
}
{% endschema %}